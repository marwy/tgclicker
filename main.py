import asyncio
import logging
import sys

from tortoise.functions import Lower
from datetime import datetime, timezone, timedelta

import aiogram.exceptions
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, FSInputFile

# –°–µ—Å—Å–∏—è –∏ —Å–∞–º–∞ –º–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from data import db_session
from data.models import Users
# –¢–æ–∫–µ–Ω —Ç–≥ –±–æ—Ç–∞
from config import BOT_TOKEN

dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –∏–ª–∏ id
class NameStates(StatesGroup):
    waiting_nick_or_id = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏ –µ—ë –∑–∞–≥—Ä—É–∑–∫–∏
class AvatarStates(StatesGroup):
    waiting_for_photo = State()


# /start –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command('start'))
@dp.message(F.text == '–ú–µ–Ω—é')
async def command_start_handler(message: Message) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ –±–∞–∑–µ –∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —Å–æ–∑–¥–∞–µ—Ç –≤ –±–¥ –∑–∞–ø–∏—Å—å –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await Users.get_or_none(telegram_id=message.from_user.id):
        # –ö–Ω–æ–ø–∫–∏ Reply
        kb = [
            [
                types.KeyboardButton(text="–ö–ª–∏–∫–µ—Ä üîò"),
                types.KeyboardButton(text="–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä üíØ"),
                types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüëª"),
                types.KeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ωüõí"),
                types.KeyboardButton(text="–¢–æ–ø üì£"),
            ],
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                       input_field_placeholder="–ü—Ä–∏–≤–µ—Ç–∏–∫ :3")
        # –§–æ—Ç–æ –ª–æ–≥–æ—Ç–∏–ø
        photo = FSInputFile('Picture/logo.jpg')
        await message.answer_photo(photo=photo, caption=f"–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! ‚ô™ÔΩû(¬¥ŒµÔΩÄ )\n\n"
                                                        f"–°–∫–æ—Ä–µ–π –∫–ª–∏–∫–∞—Ç—å! –í–ø–µ—Ä—ë–¥, –≤–ø–µ—Ä—ë–¥, –≤–ø–µ—Ä—ë–¥!",
                                   reply_markup=keyboard)
    else:
        await Users.create(name=message.from_user.username, telegram_id=message.from_user.id, money=0)
        # –ö–Ω–æ–ø–∫–∏ Reply
        kb = [
            [
                types.KeyboardButton(text="–ö–ª–∏–∫–µ—Ä üîò"),
                types.KeyboardButton(text="–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä üíØ"),
                types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüëª"),
                types.KeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ωüõí"),
                types.KeyboardButton(text="–¢–æ–ø üì£"),
            ],
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                       input_field_placeholder="–ü—Ä–∏–≤–µ—Ç–∏–∫ :3")
        # –§–æ—Ç–æ –ª–æ–≥–æ—Ç–∏–ø
        photo = FSInputFile('Picture/logo.jpg')
        await message.answer_photo(photo=photo, caption=f'–ü—Ä–∏–≤–µ—Ç–∏–∫!\n'
                                                        f'–Ø –∫–ª–∏–∫–µ—Ä-–±–æ—Ç „Éæ(Ôºæ-Ôºæ)„Éé\n\n'
                                                        f'‚ãÜ ÀöÔΩ°‚ãÜ‡≠®‡≠ßÀö Àö‡≠®‡≠ß‚ãÜÔΩ°Àö ‚ãÜ\n\n'
                                                        f'–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É, '
                                                        f'—á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª üëá',
                                   reply_markup=keyboard)


# /help –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command('help'))
async def command_start_handler(message: Message) -> None:
    await message.answer(f"/start\n"
                         f"/help\n"
                         f"/restart\n"
                         f"/click\n"
                         f"/autoclicker\n"
                         f"/profile\n"
                         f"/shop\n"
                         f"/top\n"
                         f"/user @username or telegram_id\n")


@dp.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞')
async def user_get_button(message: Message, state: FSMContext) -> None:
    # –ö–Ω–æ–ø–∫–∏ Reply
    kb = [
        [
            types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="Username –∏–ª–∏ telegram id")
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ id', reply_markup=keyboard)
    # –°—Ç–∞–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–ª–∏ —Ç–≥ –∞–π–¥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    await state.set_state(NameStates.waiting_nick_or_id)


@dp.message(NameStates.waiting_nick_or_id, F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel_name_search(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    await state.clear()
    await command_profile_handler(message)


@dp.message(NameStates.waiting_nick_or_id, F.text != '–û—Ç–º–µ–Ω–∞')
async def name_search(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ —Ç–≥ –∞–π–¥–∏
    if message.text.startswith('@'):
        user = await Users.annotate(name=Lower('name')).filter(name=message.text[1:].lower()).get_or_none()
    elif message.text.isnumeric():
        user = await Users.get_or_none(telegram_id=int(message.text))
    else:
        user = await Users.annotate(name=Lower('name')).filter(name=message.text.lower()).get_or_none()
    # –ö–Ω–æ–ø–∫–∏ Reply
    kb = [
        [
            types.KeyboardButton(text="–ú–µ–Ω—é"),
            types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–ü—Ä–∏–≤–µ—Ç–∏–∫ :3")
    if user:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø—Ä–∏–∫—Ä–∏–ø–ª—è–µ—Ç –µ—ë
        if user.avatar:
            await message.answer_photo(photo=user.avatar, caption=f"@{user.name} | {user.telegram_id}\n"
                                                                  f"–û—á–∫–∏: {user.money}\n"
                                                                  f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                                                  f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}",
                                       reply_markup=keyboard)
        else:
            await message.answer(f"@{user.name} | {user.telegram_id}\n"
                                 f"–û—á–∫–∏: {user.money}\n"
                                 f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                 f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}", reply_markup=keyboard)
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=keyboard)
    await state.clear()


@dp.message(F.text.regexp(r'/u_(.*)'))
async def user_get_short(message: Message) -> None:
    # –ü–æ–∏—Å–∫ —é–∑–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ /u_*tg_id* —Å–¥–µ–ª–∞–Ω–Ω–æ –¥–ª—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ö –ø—Ä–æ—Ñ–∏–ª—è
    if message.text[3:].isnumeric():
        user = await Users.get_or_none(telegram_id=int(message.text[3:]))
    else:
        user = None
    # –ö–Ω–æ–ø–∫–∏ Reply
    kb = [
        [
            types.KeyboardButton(text="–ú–µ–Ω—é")
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–ü—Ä–∏–≤–µ—Ç–∏–∫ :3")
    if user:
        if user.avatar:
            await message.answer_photo(photo=user.avatar, caption=f"@{user.name} | {user.telegram_id}\n"
                                                                  f"–û—á–∫–∏: {user.money}\n"
                                                                  f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                                                  f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}",
                                       reply_markup=keyboard)
        else:
            await message.answer(f"@{user.name} | {user.telegram_id}\n"
                                 f"–û—á–∫–∏: {user.money}\n"
                                 f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                 f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}", reply_markup=keyboard)
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /user
@dp.message(Command('user'))
async def user_get(message: Message) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–π —Ç–∏–ø –Ω–∞–ø–∏—Å–∞–ª –∏–≥—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if message.text.startswith('/user @'):
        user = await Users.annotate(name_lower=Lower('name')).filter(name_lower=message.text[7:].lower()).first()
    elif message.text[6:].isnumeric():
        user = await Users.get_or_none(telegram_id=int(message.text[6:]))
    else:
        user = await Users.annotate(name_lower=Lower('name')).filter(name_lower=message.text[6:].lower()).first()
    # –ö–Ω–æ–ø–∫–∏ Reply
    kb = [
        [
            types.KeyboardButton(text="–ú–µ–Ω—é")
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–ü—Ä–∏–≤–µ—Ç–∏–∫ :3")
    if user:
        if user.avatar:
            await message.answer_photo(photo=user.avatar, caption=f"@{user.name} | {user.telegram_id}\n"
                                                                  f"–û—á–∫–∏: {user.money}\n"
                                                                  f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                                                  f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}",
                                       reply_markup=keyboard)
        else:
            await message.answer(f"@{user.name} | {user.telegram_id}\n"
                                 f"–û—á–∫–∏: {user.money}\n"
                                 f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                 f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}", reply_markup=keyboard)
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /top
@dp.message(Command('top'))
@dp.message(F.text == '–¢–æ–ø üì£')
async def command_top(message: Message) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤
    top = await Users.all().order_by('-money').limit(10)
    res = ['–≠—Ç–æ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤! –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Ç—ã —Ç—É—Ç –ø–æ—è–≤–∏—à—å—Å—è (ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)', '', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–∏:',
           '–ò–º—è - –æ—á–∫–∏ - –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']
    for i in range(len(top)):
        res.append(f'{i + 1}. @{top[i].name} - {top[i].money} - {top[i].created_date.strftime("%Y.%m.%d")} '
                   f'/u_{top[i].telegram_id}')
    kb = [
        [
            types.KeyboardButton(text="–ú–µ–Ω—é"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–ö–∞–∫–∏–µ –∂–µ –∫—Ä—É—Ç—ã–µ –ª—é–¥–∏")
    await message.answer('\n'.join(res), reply_markup=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /clicker
@dp.message(Command('clicker'))
@dp.message(F.text == '–ö–ª–∏–∫–µ—Ä üîò')
async def command_start_handler(message: Message) -> None:
    kb = [
        [
            types.KeyboardButton(text="üëåClick"),
            types.KeyboardButton(text="–ú–µ–Ω—é"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–•–≤–∞—Ç–∏—Ç —á–∏—Ç–∞—Ç—å –∫–ª–∏–∫–∞–π –¥–∞–≤–∞–π")
    await message.answer(f"–ö–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏! ‚òÖ\n\n"
                         f"–û—á–∫–∏ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —ç—Ç–æ ÍâÇ(Àä·óúÀã*)", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤
@dp.message(F.text == 'üëåClick')
async def click_text(message: Message) -> None:
    user = await Users.get(telegram_id=message.from_user.id)
    kb = [
        [
            types.KeyboardButton(text="üëåClick"),
            types.KeyboardButton(text="–ú–µ–Ω—é"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–•–≤–∞—Ç–∏—Ç —á–∏—Ç–∞—Ç—å –∫–ª–∏–∫–∞–π –¥–∞–≤–∞–π")
    user.money += user.money_in_click
    await user.save()
    await message.answer(f"+{user.money_in_click} –æ—á–∫–æ–≤\n"
                         f"–û—á–∫–∏: {user.money}", reply_markup=keyboard)


# –∫–æ–º–∞–Ω–¥–∞ –ü—Ä–æ—Ñ–∏–ª—å
@dp.message(Command('profile'))
@dp.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüëª')
async def command_profile_handler(message: Message) -> None:
    user = await Users.get(telegram_id=message.from_user.id)
    kb = [
        [
            types.KeyboardButton(text="–ú–µ–Ω—é"),
            types.KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É"),
            types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–í–∞—É –º–∞–≥–∏—è")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–ø–∞
    profile_photo = await message.from_user.get_profile_photos()
    if user.avatar:
        await message.answer_photo(photo=user.avatar, caption=f"–≠—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                                                              f"@{user.name} | {user.telegram_id}\n"
                                                              f"–û—á–∫–∏: {user.money}\n"
                                                              f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                                              f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                                              f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}",
                                   reply_markup=keyboard)
    elif profile_photo.photos:
        photo = profile_photo.photos[0][0].file_id
        user.avatar = photo
        await user.save()
        await message.answer_photo(photo=photo, caption=f"–≠—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                                                        f"@{user.name} | {user.telegram_id}\n"
                                                        f"–û—á–∫–∏: {user.money}\n"
                                                        f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                                                        f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                                                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}",
                                   reply_markup=keyboard)
    else:
        await message.answer(f"–≠—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                             f"@{user.name} | {user.telegram_id}\n"
                             f"–û—á–∫–∏: {user.money}\n"
                             f"–û—á–∫–∏/–∫–ª–∏–∫: {user.money_in_click}\n"
                             f"–û—á–∫–∏/—Å–µ–∫—É–Ω–¥—É: {user.money_in_sec}\n"
                             f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è: {user.max_afk_time}", reply_markup=keyboard)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
@dp.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É')
async def set_avatar(message: Message, state: FSMContext) -> None:
    kb = [
        [
            types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–í–∞—É –º–∞–≥–∏—è")
    await message.answer('–ñ–¥—É —Ñ–æ—Ç–æ', reply_markup=keyboard)
    # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await state.set_state(AvatarStates.waiting_for_photo)


# –û—Ç–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
@dp.message(AvatarStates.waiting_for_photo, F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel_user_photo(message: types.Message, state: FSMContext):
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await command_profile_handler(message)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
@dp.message(AvatarStates.waiting_for_photo, F.photo)
async def store_user_photo(message: types.Message, state: FSMContext):
    user = await Users.get(telegram_id=message.from_user.id)
    user.avatar = message.photo[-1].file_id
    await user.save()
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()
    await command_profile_handler(message)


# –ö–æ–º–∞–Ω–¥–∞ /autoclicker
@dp.message(Command('autoclicker'))
@dp.message(F.text == '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä üíØ')
async def command_autoclicker_handler(message: Message) -> None:
    user = await Users.get(telegram_id=message.from_user.id)
    # Inline –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
    if user.afk_worked:
        builder.add(types.InlineKeyboardButton(
            text=f"üî¥–°—Ç–æ–ø üì£",
            callback_data="stop_autoclick")
        )
        builder.add(types.InlineKeyboardButton(
            text=f"üîÉ–†–µ—Å—Ç–∞—Ä—Ç",
            callback_data="restart_autoclick")
        )
        # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –¥–ª—è –≤—ã—á–µ—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
        afk_time = datetime.now(timezone.utc) - user.start_afk_time
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
        if afk_time > user.max_afk_time:
            await message.answer(f"–≠—Ç–æ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä\n"
                                 f"–û—Ç–∫–∏–Ω—å—Å—è –Ω–∞ —Å–ø–∏–Ω–∫—É –∫—Ä–µ—Å–ª–∞ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Å—è,  –±–æ—Ç –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è (*ÀòÔ∏∂Àò*)\n"
                                 f"{user.money_in_sec} –æ—á–∫–∏/—Å–µ–∫—É–Ω–¥—É\n"
                                 f"+ {user.max_afk_time.seconds * user.money_in_sec} –æ—á–∫–æ–≤ (MAX)\n"
                                 f"work time: 0 min",
                                 reply_markup=builder.as_markup())
        else:
            # –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å–∫–æ–ª—å–∫–æ –æ–Ω –µ—â–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            work = user.max_afk_time - afk_time
            await message.answer(f"–≠—Ç–æ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä\n"
                                 f"–û—Ç–∫–∏–Ω—å—Å—è –Ω–∞ —Å–ø–∏–Ω–∫—É –∫—Ä–µ—Å–ª–∞ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Å—è,  –±–æ—Ç –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è (*ÀòÔ∏∂Àò*)\n"
                                 f"{user.money_in_sec} –æ—á–∫–∏/—Å–µ–∫—É–Ω–¥—É\n"
                                 f"+{afk_time.seconds * user.money_in_sec} –æ—á–∫–æ–≤ (–º–∞–∫—Å.)\n"
                                 f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work.seconds // 60} –º–∏–Ω.",
                                 reply_markup=builder.as_markup())
    else:
        builder.add(types.InlineKeyboardButton(
            text="üü¢–°—Ç–∞—Ä—Ç",
            callback_data="start_autoclick")
        )
        await message.answer(f"–≠—Ç–æ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä\n"
                             f"–û—Ç–∫–∏–Ω—å—Å—è –Ω–∞ —Å–ø–∏–Ω–∫—É –∫—Ä–µ—Å–ª–∞ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Å—è,  –±–æ—Ç –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è (*ÀòÔ∏∂Àò*)\n"
                             f"–°–ø–ª—é....", reply_markup=builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
@dp.callback_query(F.data == "start_autoclick")
async def start_autoclicker(callback: types.CallbackQuery):
    user = await Users.get(telegram_id=callback.from_user.id)
    user.start_afk_time = datetime.now(timezone.utc)
    user.afk_worked = True
    await user.save()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text=f"üî¥–°—Ç–æ–ø üì£",
        callback_data="stop_autoclick")
    )
    builder.add(types.InlineKeyboardButton(
        text=f"üîÉ–†–µ—Å—Ç–∞—Ä—Ç",
        callback_data="restart_autoclick")
    )
    await callback.message.edit_text(f"–≠—Ç–æ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä\n"
                                     f"{user.money_in_sec} –æ—á–∫–æ–≤/—Å–µ–∫.", reply_markup=builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞. –û—Å—Ç–∞–≤–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
@dp.callback_query(F.data == "stop_autoclick")
async def stop_autoclicker(callback: types.CallbackQuery):
    user = await Users.get(telegram_id=callback.from_user.id)
    afk_time = datetime.now(timezone.utc) - user.start_afk_time
    if afk_time > user.max_afk_time:
        afk_time = user.max_afk_time
    user.money += afk_time.seconds * user.money_in_sec
    user.afk_worked = False
    await user.save()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üü¢–°—Ç–∞—Ä—Ç",
        callback_data="start_autoclick")
    )
    await callback.message.edit_text(f"Autoclicker 3000\n"
                                     f"+{afk_time.seconds * user.money_in_sec} –æ—á–∫–æ–≤\n"
                                     f"–°–ø–ª—é....", reply_markup=builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞. –†–µ—Å—Ç–∞—Ä—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
@dp.callback_query(F.data == "restart_autoclick")
async def stop_autoclicker(callback: types.CallbackQuery):
    user = await Users.get(telegram_id=callback.from_user.id)
    afk_time = datetime.now(timezone.utc) - user.start_afk_time
    if afk_time > user.max_afk_time:
        afk_time = user.max_afk_time
    user.money += afk_time.seconds * user.money_in_sec
    user.start_afk_time = datetime.now(timezone.utc)
    user.afk_worked = True
    await user.save()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text=f"üî¥–°–¢–æ–ø üì£",
        callback_data="stop_autoclick")
    )
    builder.add(types.InlineKeyboardButton(
        text=f"üîÉ–†–µ—Å—Ç–∞—Ä—Ç",
        callback_data="restart_autoclick")
    )
    try:
        await callback.message.edit_text(f"Autoclicker 3000\n"
                                         f"{user.money_in_sec} –æ—á–∫–æ–≤/—Å–µ–∫.\n"
                                         f"+{afk_time.seconds * user.money_in_sec} –æ—á–∫–æ–≤\n"
                                         f"–†–µ—Å—Ç–∞—Ä—Ç....", reply_markup=builder.as_markup())
    except aiogram.exceptions.TelegramBadRequest:
        await callback.answer('–†–µ—Å—Ç–∞—Ä—Ç')


# –ö–æ–º–∞–Ω–¥–∞ /shop
@dp.message(Command('shop'))
@dp.message(F.text == '–ú–∞–≥–∞–∑–∏–Ωüõí')
async def command_autoclicker_handler(message: Message) -> None:
    user = await Users.get(telegram_id=message.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/–∫–ª–∏–∫", callback_data="da"))
    price_click = int(100 * (1.05 ** user.buy_money_in_click))
    builder.add(types.InlineKeyboardButton(text=f"üü¢{price_click}", callback_data="buy_money_click"))
    builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/—Å–µ–∫.", callback_data="da"))
    price_sec = int(100 * (1.05 ** user.buy_money_in_sec))
    builder.add(types.InlineKeyboardButton(text=f"üü¢{price_sec}", callback_data="buy_money_sec"))
    builder.add(types.InlineKeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è", callback_data="da"))
    price_afk_time = int(100 * (1.05 ** user.buy_max_afk_time))
    builder.add(types.InlineKeyboardButton(text=f"üü¢{price_afk_time}", callback_data="buy_max_afk"))
    builder.adjust(2)
    await message.answer(f"‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüíú‚ïê‚ïÆ\n"
                         f"  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
                         f"   –í –º–∞–≥–∞–∑–∏–Ω—á–∏–∫\n"
                         f"‚ï∞‚ïêüíú‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ", reply_markup=builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
@dp.callback_query(F.data == "buy_money_click")
async def shop_money_click(callback: types.CallbackQuery) -> None:
    user = await Users.get(telegram_id=callback.from_user.id)
    price_click = int(100 * (1.05 ** user.buy_money_in_click))
    if price_click <= user.money:
        user.money -= price_click
        user.money_in_click += 1
        user.buy_money_in_click += 1
        await user.save()
        await callback.answer('–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–Ω–æ')
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/–∫–ª–∏–∫", callback_data="da"))
        price_click = int(100 * (1.05 ** user.buy_money_in_click))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_click}", callback_data="buy_money_click"))
        builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/—Å–µ–∫.", callback_data="da"))
        price_sec = int(100 * (1.05 ** user.buy_money_in_sec))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_sec}", callback_data="buy_money_sec"))
        builder.add(types.InlineKeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è", callback_data="da"))
        price_afk_time = int(100 * (1.05 ** user.buy_max_afk_time))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_afk_time}", callback_data="buy_max_afk"))
        builder.adjust(2)
        await callback.message.edit_text(f"‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüíú‚ïê‚ïÆ\n"
                                         f"  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
                                         f"   –í –º–∞–≥–∞–∑–∏–Ω—á–∏–∫\n"
                                         f"‚ï∞‚ïêüíú‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ", reply_markup=builder.as_markup())
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
@dp.callback_query(F.data == "buy_money_sec")
async def shop_money_click(callback: types.CallbackQuery) -> None:
    user = await Users.get(telegram_id=callback.from_user.id)
    price_click = int(100 * (1.05 ** user.buy_money_in_sec))
    if price_click <= user.money:
        user.money -= price_click
        user.money_in_sec += 1
        user.buy_money_in_sec += 1
        await user.save()
        await callback.answer('–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–Ω–æ')
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/–∫–ª–∏–∫", callback_data="da"))
        price_click = int(100 * (1.05 ** user.buy_money_in_click))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_click}", callback_data="buy_money_click"))
        builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/—Å–µ–∫.", callback_data="da"))
        price_sec = int(100 * (1.05 ** user.buy_money_in_sec))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_sec}", callback_data="buy_money_sec"))
        builder.add(types.InlineKeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è", callback_data="da"))
        price_afk_time = int(100 * (1.05 ** user.buy_max_afk_time))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_afk_time}", callback_data="buy_max_afk"))
        builder.adjust(2)
        await callback.message.edit_text(f"‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüíú‚ïê‚ïÆ\n"
                                         f"  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
                                         f"   –í –º–∞–≥–∞–∑–∏–Ω—á–∏–∫\n"
                                         f"‚ï∞‚ïêüíú‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ", reply_markup=builder.as_markup())
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
@dp.callback_query(F.data == "buy_max_afk")
async def shop_money_click(callback: types.CallbackQuery) -> None:
    user = await Users.get(telegram_id=callback.from_user.id)
    price_click = int(100 * (1.05 ** user.buy_max_afk_time))
    if price_click <= user.money:
        user.money -= price_click
        user.max_afk_time += timedelta(hours=1)
        user.buy_max_afk_time += 1
        await user.save()
        await callback.answer('–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–Ω–æ')
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/–∫–ª–∏–∫", callback_data="da"))
        price_click = int(100 * (1.05 ** user.buy_money_in_click))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_click}", callback_data="buy_money_click"))
        builder.add(types.InlineKeyboardButton(text="–û—á–∫–∏/—Å–µ–∫.", callback_data="da"))
        price_sec = int(100 * (1.05 ** user.buy_money_in_sec))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_sec}", callback_data="buy_money_sec"))
        builder.add(types.InlineKeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∞—Ñ–∫ –≤—Ä–µ–º—è", callback_data="da"))
        price_afk_time = int(100 * (1.05 ** user.buy_max_afk_time))
        builder.add(types.InlineKeyboardButton(text=f"üü¢{price_afk_time}", callback_data="buy_max_afk"))
        builder.adjust(2)
        await callback.message.edit_text(f"‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüíú‚ïê‚ïÆ\n"
                                         f"  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
                                         f"   –í –º–∞–≥–∞–∑–∏–Ω—á–∏–∫\n"
                                         f"‚ï∞‚ïêüíú‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ", reply_markup=builder.as_markup())
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


async def main() -> None:
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    # –ò–Ω—Ü–∏–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db_session.global_init("db/database.db", reset_db=False)
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
